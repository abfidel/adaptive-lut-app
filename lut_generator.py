import numpy as np
import os
from datetime import datetime

class LUTGenerator:
    def __init__(self, lut_size=32):
        self.lut_size = lut_size
    
    def apply_temperature_adjustment(self, r, g, b, temperature):
        """Apply color temperature adjustment (-100 to +100)"""
        temp_factor = temperature / 100.0
        
        if temp_factor > 0:  # Warmer (more red/yellow)
            r = min(1.0, r + temp_factor * 0.1)
            b = max(0.0, b - temp_factor * 0.05)
        else:  # Cooler (more blue)
            r = max(0.0, r + temp_factor * 0.05)
            b = min(1.0, b - temp_factor * 0.1)
            
        return r, g, b
    
    def apply_tint_adjustment(self, r, g, b, tint):
        """Apply tint adjustment (-100 to +100)"""
        tint_factor = tint / 100.0
        
        if tint_factor > 0:  # More magenta
            r = min(1.0, r + tint_factor * 0.05)
            b = min(1.0, b + tint_factor * 0.05)
            g = max(0.0, g - tint_factor * 0.03)
        else:  # More green
            g = min(1.0, g - tint_factor * 0.05)
            r = max(0.0, r + tint_factor * 0.03)
            b = max(0.0, b + tint_factor * 0.03)
            
        return r, g, b
    
    def apply_contrast_adjustment(self, r, g, b, contrast):
        """Apply contrast adjustment (-100 to +100)"""
        contrast_factor = 1.0 + (contrast / 100.0)
        
        # Apply contrast around 0.5 midpoint
        r = 0.5 + (r - 0.5) * contrast_factor
        g = 0.5 + (g - 0.5) * contrast_factor
        b = 0.5 + (b - 0.5) * contrast_factor
        
        return np.clip(r, 0, 1), np.clip(g, 0, 1), np.clip(b, 0, 1)
    
    def apply_exposure_adjustment(self, r, g, b, exposure):
        """Apply exposure adjustment (-2.0 to +2.0)"""
        exposure_factor = 2 ** exposure
        
        r = r * exposure_factor
        g = g * exposure_factor
        b = b * exposure_factor
        
        return np.clip(r, 0, 1), np.clip(g, 0, 1), np.clip(b, 0, 1)
    
    def apply_saturation_adjustment(self, r, g, b, saturation):
        """Apply saturation adjustment (-100 to +100)"""
        sat_factor = 1.0 + (saturation / 100.0)
        
        # Calculate luminance
        luma = 0.299 * r + 0.587 * g + 0.114 * b
        
        # Blend between original color and luminance
        r = luma + (r - luma) * sat_factor
        g = luma + (g - luma) * sat_factor
        b = luma + (b - luma) * sat_factor
        
        return np.clip(r, 0, 1), np.clip(g, 0, 1), np.clip(b, 0, 1)
    
    def apply_color_wheel_adjustment(self, r, g, b, color_wheels):
        """Apply color wheel adjustments for shadows, midtones, highlights"""
        # Calculate luminance to determine shadow/midtone/highlight regions
        luma = 0.299 * r + 0.587 * g + 0.114 * b
        
        # Define region weights
        shadow_weight = max(0, 1 - luma * 2)  # Stronger in dark areas
        highlight_weight = max(0, (luma - 0.5) * 2)  # Stronger in bright areas
        midtone_weight = 1 - shadow_weight - highlight_weight  # Remainder
        
        # Apply color wheel adjustments
        if 'shadows' in color_wheels:
            shadow_adj = color_wheels['shadows']
            r += shadow_adj.get('red', 0) * shadow_weight * 0.1
            g += shadow_adj.get('green', 0) * shadow_weight * 0.1
            b += shadow_adj.get('blue', 0) * shadow_weight * 0.1
        
        if 'midtones' in color_wheels:
            midtone_adj = color_wheels['midtones']
            r += midtone_adj.get('red', 0) * midtone_weight * 0.1
            g += midtone_adj.get('green', 0) * midtone_weight * 0.1
            b += midtone_adj.get('blue', 0) * midtone_weight * 0.1
        
        if 'highlights' in color_wheels:
            highlight_adj = color_wheels['highlights']
            r += highlight_adj.get('red', 0) * highlight_weight * 0.1
            g += highlight_adj.get('green', 0) * highlight_weight * 0.1
            b += highlight_adj.get('blue', 0) * highlight_weight * 0.1
        
        return np.clip(r, 0, 1), np.clip(g, 0, 1), np.clip(b, 0, 1)
    
    def generate_cube_from_json(self, adjustment_json, output_path=None, title=None):
        """Generate a .cube LUT file with real color adjustments"""
        if output_path is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_path = f"static/luts/adaptive_lut_{timestamp}.cube"
        
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        
        # Extract adjustments
        adjustments = adjustment_json.get('adjustments', {})
        color_wheels = adjustment_json.get('color_wheels', {})
        base_style = adjustment_json.get('base_style', 'AI Generated LUT')
        description = adjustment_json.get('description', 'Generated by Adaptive LUT')
        
        # Parse numeric values safely
        def safe_float(value, default=0.0):
            try:
                if isinstance(value, str):
                    return float(value.replace('+', ''))
                return float(value)
            except:
                return default
        
        temperature = safe_float(adjustments.get('temperature', 0))
        tint = safe_float(adjustments.get('tint', 0))
        exposure = safe_float(adjustments.get('exposure', 0))
        contrast = safe_float(adjustments.get('contrast', 0))
        saturation = safe_float(adjustments.get('saturation', 0))
        
        # Write .cube file header
        with open(output_path, "w") as f:
            f.write(f"TITLE \"{base_style}\"\n")
            f.write(f"# {description}\n")
            f.write(f"# Generated by Adaptive LUT - AI-Powered Color Grading\n")
            f.write(f"# Temperature: {temperature}, Contrast: {contrast}, Saturation: {saturation}\n")
            f.write(f"LUT_3D_SIZE {self.lut_size}\n")
            f.write("DOMAIN_MIN 0.0 0.0 0.0\n")
            f.write("DOMAIN_MAX 1.0 1.0 1.0\n")
            f.write("\n")
            
            # Generate LUT data with actual color transformations
            for b_idx in range(self.lut_size):
                for g_idx in range(self.lut_size):
                    for r_idx in range(self.lut_size):
                        # Normalized RGB values (0.0 to 1.0)
                        r = r_idx / (self.lut_size - 1)
                        g = g_idx / (self.lut_size - 1)
                        b = b_idx / (self.lut_size - 1)
                        
                        # Apply adjustments in order
                        if temperature != 0:
                            r, g, b = self.apply_temperature_adjustment(r, g, b, temperature)
                        
                        if tint != 0:
                            r, g, b = self.apply_tint_adjustment(r, g, b, tint)
                        
                        if exposure != 0:
                            r, g, b = self.apply_exposure_adjustment(r, g, b, exposure)
                        
                        if contrast != 0:
                            r, g, b = self.apply_contrast_adjustment(r, g, b, contrast)
                        
                        if saturation != 0:
                            r, g, b = self.apply_saturation_adjustment(r, g, b, saturation)
                        
                        if color_wheels:
                            r, g, b = self.apply_color_wheel_adjustment(r, g, b, color_wheels)
                        
                        # Ensure values are clamped to [0, 1]
                        r = max(0.0, min(1.0, r))
                        g = max(0.0, min(1.0, g))
                        b = max(0.0, min(1.0, b))
                        
                        f.write(f"{r:.6f} {g:.6f} {b:.6f}\n")
        
        return output_path

def create_lut_from_json(adjustment_json, output_path=None, lut_size=32):
    """Create a LUT file from adjustment JSON"""
    generator = LUTGenerator(lut_size=lut_size)
    return generator.generate_cube_from_json(adjustment_json, output_path)
